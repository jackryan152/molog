#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#       molog_cli
#       
#       Copyright 2011 Jelle Smet <development@smetj.net>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 3 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#       
#       
from optparse import OptionParser
from operator import itemgetter
import sys
import urllib2
import cmd
import json
import pprint

__version__ = '0.1'

class Help():
	def __init__(self):
		pass
	def do(self):
		print ('molog_cli %s Copyright 2011 by Jelle Smet <development@smetj.net>' %(__version__))
		print ('''
Description: 

	molog_cli is a interactive command interface to the MoLog REST API.

Usage: 

	molog_cli action [--host hostname] [--username username] [--password password] [--api version]
	
	Actions:
	
		start			Starts the interactive prompt.
		help			Shows help

			
	Parameters:
	
		--host			The hostname or IP of the server on which MoLog is running.
		--username		The username to login to MoLog.
		--password		The password to login to MoLog.
		--api			API version to use.

molog_cli is distributed under the Terms of the GNU General Public License Version 3. (http://www.gnu.org/licenses/gpl-3.0.html)

For more information please visit http://www.smetj.net/Molog/
''')

class QueryRecords():
	def __init__(self):
		pass
class APICall():
	def __init__(self,address,port,username,password,version="v1"):
		self.opener = urllib2.build_opener(urllib2.HTTPHandler)
		self.base_url = "http://%s:%s/%s/"%(address,port,version)
	def request(self):
		pass
	def GET(self,url):
		url = self.base_url+url
		print 'GET %s'%(url)
		request = urllib2.Request(url)
		request.get_method = lambda: 'GET'
		return self.convert(self.opener.open(request).readlines())
	def PUT(self,data):
		request.add_header('Content-Type', 'your/contenttype')
	def convert(self,data):
		return json.loads(''.join(data))		
class Command(cmd.Cmd):
	def __init__(self,api):
		cmd.Cmd.__init__(self)
		self.api = api
	def do_record(self,data):
		data = data.split()

		if len(data) == 0:
			self.column_record(self.api.GET(url='record'))
		else:
			command = data[0]
			filter = ' '.join(data[1:])
			if command == 'get':
				if '=' in filter:
					self.column_record(self.api.GET(url='record?'+filter))
				else:
					self.column_record(self.api.GET(url='record/'+filter))
			elif data[0] == 'put':
				pass
			else:
				print "Unknown command."
				
			
	def do_EOF(self, line):
		return True
	def format_as_table(self,data,keys,header=None,sort_by_key=None,sort_order_reverse=False):
		"""
		Shamelessly stolen from http://www.calazan.com/python-function-for-displaying-a-list-of-dictionaries-in-table-format
		Takes a list of dictionaries, formats the data, and returns
		the formatted data as a text table.

		Required Parameters:
			data - Data to process (list of dictionaries). (Type: List)
			keys - List of keys in the dictionary. (Type: List)

		Optional Parameters:
			header - The table header. (Type: List)
			sort_by_key - The key to sort by. (Type: String)
			sort_order_reverse - Default sort order is ascending, if
				True sort order will change to descending. (Type: Boolean)
		"""
		# Sort the data if a sort key is specified (default sort order
		# is ascending)
		if sort_by_key:
			data = sorted(data,
						  key=itemgetter(sort_by_key),
						  reverse=sort_order_reverse)

		# If header is not empty, add header to data
		if header:
			# Get the length of each header and create a divider based
			# on that length
			header_divider = []
			for name in header:
				header_divider.append('-' * len(name))

			# Create a list of dictionary from the keys and the header and
			# insert it at the beginning of the list. Do the same for the
			# divider and insert below the header.
			header_divider = dict(zip(keys, header_divider))
			data.insert(0, header_divider)
			header = dict(zip(keys, header))
			data.insert(0, header)

		column_widths = []
		for key in keys:
			column_widths.append(max(len(str(column[key])) for column in data))

		# Create a tuple pair of key and the associated column width for it
		key_width_pair = zip(keys, column_widths)

		#format = ('%-*s ' * len(keys)).strip() + '\n'
		format = ('%-*s ' * len(keys)).strip() + '\n'
		formatted_data = ''
		for element in data:
			data_to_format = []
			# Create a tuple that will be used for the formatting in
			# width, value format
			for pair in key_width_pair:
				data_to_format.append(pair[1])
				data_to_format.append(element[pair[0]])
			formatted_data += format % tuple(data_to_format)
		return formatted_data
	def column_record(self,list):
		header = [ 'Date', 'Host', 'ID', 'Level', 'Message' ]
		keys = [ 'date','host','id','level','message' ]
		print self.format_as_table(list,keys,header,None,False)
def main():
	#TODO(smetj): replace OptionParser by argparse
	parser = OptionParser()
	help=Help()
	parser.add_option("--host", dest="host", default="127.0.0.1", type="string", help="IPaddress or hostname of Molog.")
	parser.add_option("--port", dest="port", default="5669", type="string", help="The port number on which MoLog listens.")
	parser.add_option("--username", dest="username", default="guest", type="string", help="Username to connect to Molog API")	
	parser.add_option("--password", dest="password", default="guest", type="string", help="Password to connect to Molog API")
	parser.add_option("--api", dest="api", default="v1", type="string", help="The rest API version to use.")	
	(cli_options,cli_actions)=parser.parse_args()	
	
	if len(cli_actions) == 0 or cli_actions[0] == 'help':
		help.do()
		sys.exit(0)
	elif cli_actions[0] == 'start':
		api_call = APICall(
					address		= cli_options.host,
					port		= cli_options.port,
					username 	= cli_options.username,
					password 	= cli_options.password,
					version		= cli_options.api
					)
	
		Command(api=api_call).cmdloop()
		print "molog_cli has exit."
	else:
		help.do()
		sys.exit(0)
			
	
	return 0

if __name__ == '__main__':
	main()

